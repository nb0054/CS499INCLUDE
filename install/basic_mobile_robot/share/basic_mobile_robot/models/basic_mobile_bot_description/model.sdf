<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="basic_mobile_bot">  
  <static>false</static>

  <description>
      The main body (chassis) of the Husky robot.
    </description>
    <link name='chassis'>
      <pose>0 0 .25 0 0 0</pose>

      <description>
        The collision hitbox for the Husky.
      </description>
      <collision name='collision'>
        <geometry>
          <box>
            <size>.990 .420 .200</size>
          </box>
        </geometry>
      </collision>

      <description>
        The visual body of the Husky.
      </description>
      <visual name='visual'>
        <geometry>
          <box>
            <size>.990 .420 .200</size>
          </box>
        </geometry>
      </visual>
    </link>
    
    <description>
    Husky's front left wheel
    </description>
    <link name="front_left_wheel">
      <pose>0.272 0.270 0.165 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    
    <description>
    Husky's front right wheel
    </description>
    <link name="front_right_wheel">
      <pose>0.272 -0.270 0.165 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    
    <description>
    Husky's rear left wheel
    </description>
    <link name="rear_left_wheel">
      <pose>-0.272 0.270 0.165 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    
    <description>
    Husky's rear right wheel
    </description>
    <link name="rear_right_wheel">
      <pose>-0.272 -0.270 0.165 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.165</radius>
            <length>.125</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    
    <description>
    Front left wheel hinge
    </description>
    <joint type="revolute" name="front_left_wheel_hinge">
      <pose>0 0 0.06 0 0 0</pose>
      <child>front_left_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <description>
    Front right wheel hinge
    </description>
    <joint type="revolute" name="front_right_wheel_hinge">
      <pose>0 0 -0.06 0 0 0</pose>
      <child>front_right_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>
    
    <description>
    Rear left wheel hinge
    </description>
    <joint type="fixed" name="rear_left_wheel_hinge">
      <pose>0 0 0.06 0 0 0</pose>
      <child>rear_left_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

    <description>
    Rear right wheel hinge
    </description>
    <joint type="fixed" name="rear_right_wheel_hinge">
      <pose>0 0 -0.06 0 0 0</pose>
      <child>rear_right_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>
    
<!-- *********************** DEPTH CAMERA ******************************  -->
 <description>
    Husky's camera sensor
</description>
<link name="camera_depth_frame">
    <pose>0.25 0 0.4 -1.5708 0 -1.5708</pose>
</link>
 
<link name="cameralink">
  <pose>0.25 0 0.4 0 0 0</pose>
   
  <visual name="camera_visual">
    <pose>-0.005 0 0 0 0 0</pose>
    <geometry>
      <box>
        <size>0.015 0.08 0.022</size>
      </box>
    </geometry>
    <material>
      <ambient>0 0 0 1.0</ambient>
      <diffuse>0 0 0 1.0</diffuse>
      <specular>0.0 0.0 0.0 1.0</specular>
      <emissive>0.0 0.0 0.0 1.0</emissive>
    </material>
  </visual>    
   
  <sensor name="depth_camera" type="camera">
    <always_on>true</always_on>
    <visualize>false</visualize>
    <update_rate>5</update_rate>
    <camera name="camera">
      <horizontal_fov>1.02974</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.02</near>
        <far>10</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <!-- Noise is sampled independently per pixel on each frame.
             That pixel's noise value is added to each of its color
              channels, which at that point lie in the range [0,1]. -->
        <mean>0.0</mean>
        <stddev>0.007</stddev>
      </noise>
    </camera>
    <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
      <camera_name>depth_camera</camera_name>
      <frame_name>camera_depth_frame</frame_name>
      <hack_baseline>0</hack_baseline>
      <min_depth>0.001</min_depth>
    </plugin>
  </sensor>
</link>
    <joint name="camera_joint" type="fixed">
      <child>cameralink</child>
      <parent>chassis</parent>
    </joint>
    

  <!-- *********************** IMU SENSOR SETUP **************************  -->
  <link name="imu_link">
    <gravity>true</gravity>
    <sensor name="bmb_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="basic_mobile_bot_imu" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>imu_link</frame_name>
        <ros>
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>

  <!-- *********************** GPS SETUP *********************************  -->
  <link name="gps_link">
    <sensor name="bmb_gps" type="gps">
      <always_on>true</always_on>
      <update_rate>10.0</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1e-2</stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1</stddev>
            </noise>
          </vertical>
        </position_sensing>
      </gps>
      <plugin name="basic_mobile_bot_gps" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <remapping>~/out:=gps/fix</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent>base_link</parent>
    <child>imu_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>  

  <joint name="gps_joint" type="fixed">
    <parent>base_link</parent>
    <child>gps_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>  

 <!-- *********************** WHEEL ODOMETRY ***************************    -->
  
 <plugin name="basic_mobile_bot_diff_drive" filename="libgazebo_ros_diff_drive.so">

    <update_rate>30</update_rate>

    <!-- wheels -->
    <left_joint>front_left_wheel_hinge</left_joint>
    <right_joint>front_right_wheel_hinge</right_joint>

    <!-- kinematics -->
    <wheel_separation>0.52</wheel_separation>
    <wheel_diameter>0.28</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>20</max_wheel_torque>
    <max_wheel_acceleration>1.0</max_wheel_acceleration>

    <!-- Receive velocity commands on this ROS topic -->
    <command_topic>cmd_vel</command_topic>

    <!-- output -->
    <!-- When false, publish no wheel odometry data to a ROS topic -->
    <publish_odom>true</publish_odom>

    <!-- When true, publish coordinate transform from odom to base_footprint -->
    <!-- I usually use the robot_localization package to publish this transform -->   
    <publish_odom_tf>false</publish_odom_tf>
    
    <!-- When true, publish coordinate transform from base_link to the wheels -->
    <!-- The robot_state_publisher package is often used to publish this transform -->   
    <publish_wheel_tf>false</publish_wheel_tf>

    <odometry_topic>odom</odometry_topic>
    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_footprint</robot_base_frame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometry_source>0</odometry_source>

    <!-- Change the ROS topic we will publish the odometry data to -->
    <ros>
      <remapping>odom:=wheel/odometry</remapping>
    </ros>

  </plugin>
 <!-- *********************** JOINT STATE PUBLISHER *********************   -->
  
  <plugin name="basic_mobile_bot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
    <ros>
      <remapping>~/out:=joint_states</remapping>
    </ros>
    <update_rate>30</update_rate>
    <joint_name>front_left_wheel_hinge</joint_name>
    <joint_name>front_right_wheel_hinge</joint_name>
    <joint_name>rear_left_wheel_hinge</joint_name>
    <joint_name>rear_left_wheel_hinge</joint_name>
  </plugin>   
  
  </model>
</sdf>
